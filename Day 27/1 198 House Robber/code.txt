public class Solution {
    public int Rob(int[] nums) {


        
        int prviousmax = 0;
        int adjacentmax = 0;
        
        for (int i = 0; i < nums.Length; i++) {
            
            int temp = adjacentmax;

            adjacentmax = Math.Max(prviousmax + nums[i], adjacentmax);

            prviousmax = temp;
        }
        
        return adjacentmax;


        // int prevMax = 0;
        
        // int currMax = 0;
        
        // for (int i = 0; i < nums.Length; i++) {
            
        //     int temp = currMax;
            
        //     currMax = Math.Max(prevMax + nums[i], currMax);


        //     prevMax = temp;
        // }


        

        // if(nums.Length ==1)
        //     return nums[0];

        //  if(nums.Length ==2)
        //     return Math.Max(nums[0], nums[1]);

        // int[] dp= new int[nums.Length];

        // dp[0] = nums[0];
        // dp[1] = Math.Max(nums[0],nums[1]);


        // for (int i = 2; i < nums.Length; i++) {


        //  dp[i] = Math.Max(dp[i-2] + nums[i], dp[i-1]);

        // }

        // return dp[nums.Length-1];

        // int a = nums[0]; // 2
        // int b = nums[1]; // 1

        // // 1 //2
        //  for (int i = 2; i < nums.Length; i++) {
           

        //     int temp = b; // 1

        //     b = Math.Max(a + nums[i], b); // 1 + 3, 2 ==> 4

        //     a= Math.Max(a,temp); // 1
        // }
        
        // return b;
    }
}

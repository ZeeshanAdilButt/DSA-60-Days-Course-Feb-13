public class Solution {
    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {
        Array.Sort(candidates);
        var result = new List<IList<int>>();
        var tempList = new List<int>();
        Backtrack(candidates, target, 0, tempList, result);
        return result;
    }
    
    private void Backtrack(int[] candidates, int target, int start, List<int> tempList, List<IList<int>> result) {
        if (target < 0) {
            return;
        } else if (target == 0) {
            result.Add(new List<int>(tempList));
        } else {
            for (int i = start; i < candidates.Length; i++) {
                if (i > start && candidates[i] == candidates[i - 1]) {
                    continue; // skip duplicates
                }
                tempList.Add(candidates[i]);
                Backtrack(candidates, target - candidates[i], i + 1, tempList, result);
                tempList.RemoveAt(tempList.Count - 1);
            }
        }
    }
}

public class Solution {
    public int CalculateMinimumHP(int[][] dungeon) {
        int m = dungeon.Length;
        int n = dungeon[0].Length;
        
        // Create a 2D array to store the minimum health required
        int[,] memo = new int[m,n];
        
        // Fill memo with -1 to indicate that the cell has not been computed yet
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                memo[i,j] = -1;
            }
        }
        
        // Calculate the minimum health required to reach the princess from the starting cell
        return CalculateMinimumHP(dungeon, memo, 0, 0, 0);
    }
    
    private int CalculateMinimumHP(int[][] dungeon, int[,] memo, int i, int j, int value) {
        int m = dungeon.Length;
            int n = dungeon[0].Length;

            if (i == m - 1 && j == n - 1) {
                // We have reached the princess cell, return the minimum health required to reach it
                //  return dungeon[i][j];
                return Math.Max(1, 1 - dungeon[i][j]);
            }   
 
        

            // Compute the minimum health required to reach the princess from the current cell
            int right = int.MaxValue;
            int down = int.MaxValue;

            if (j < n - 1)
            {
                right = CalculateMinimumHP(dungeon, memo, i, j + 1, value);
            }

            if (i < m - 1)
            {
                down = CalculateMinimumHP(dungeon, memo, i + 1, j, value);
            }

            // if (down < 0)
            //     down = Math.Abs(down) + 1;
            // else if (down != int.MaxValue)
            //     down = 1;// dungeon[i][j];

            int health = Math.Min(right, down); // -5

            // int minHealthForMe = Math.Max(1, 1 - dungeon[i][j]);

            // if(dungeon[i][j] > 0)
            health = health - dungeon[i][j];


            // if(health < 0)
            //     health = Math.Abs(health) + dungeon[i][j] + 1;
            //    else  
            //     health = 1;

            // health = health + dungeon[i][j]

              memo[i, j] = Math.Max(1, health); // Math.Max(1, health); // Save the result in memo
            return memo[i, j];
    }
}


public class Solution {
    public int CalculateMinimumHP(int[][] dungeon) {
        int m = dungeon.Length;
        int n = dungeon[0].Length;
        
        // dp[i][j] represents the minimum health required at (i, j)
        int[][] dp = new int[m][];
        for (int i = 0; i < m; i++) {
            dp[i] = new int[n];
        }
        
        // Initialize the last cell
        dp[m - 1][n - 1] = Math.Max(1 - dungeon[m - 1][n - 1], 1);
        
        // Initialize the last column
        for (int i = m - 2; i >= 0; i--) {
            dp[i][n - 1] = Math.Max(dp[i + 1][n - 1] - dungeon[i][n - 1], 1);
        }
        
        // Initialize the last row
        for (int j = n - 2; j >= 0; j--) {
            dp[m - 1][j] = Math.Max(dp[m - 1][j + 1] - dungeon[m - 1][j], 1);
        }
        
        // Fill the remaining cells
        for (int i = m - 2; i >= 0; i--) {
            for (int j = n - 2; j >= 0; j--) {
                int down = Math.Max(dp[i + 1][j] - dungeon[i][j], 1);
                int right = Math.Max(dp[i][j + 1] - dungeon[i][j], 1);
                dp[i][j] = Math.Min(down, right);
            }
        }
        
        return dp[0][0];
    }
}

